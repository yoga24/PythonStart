package com.thread.test;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.Callable;

/**
 * Created by yorga on 25-02-2017.
 */
public class ExecutorServiceTester {

    public static void main(String[] args) {

        final ThreadFactory threadFactory = new ThreadFactory() {
            private int threadCounter = 0;
            public Thread newThread(Runnable r) {
                threadCounter++;
                return new Thread(r,"Thread_"+threadCounter);
            }
        };

        final List<Long> randomMillis= getRandomMilliseconds();

        System.out.println("Random Milliseconds = "+randomMillis);


//        testExecutionService(threadFactory, randomMillis);

        testExecutorCompletionService(threadFactory, randomMillis);
    }

    private static void testExecutionService(ThreadFactory threadFactory, final List<Long> randomMillis) {
        System.out.println("** EXECUTOR SERVICE **");

        ExecutorService executorService = Executors.newFixedThreadPool(5,threadFactory);

        try {

            List<Future<String>> futuresList = new ArrayList<Future<String>>();

            for (int i = 1; i <= 10; i++) {
                final int a = i;
                futuresList.add(executorService.submit(new Callable<String>() {
                    public String call() throws Exception {
                        Thread.sleep(randomMillis.get(a-1));
                        String some = "-- "+a+" --"+Thread.currentThread().getName();
                        System.out.println("Executor Service - "+a+" COMPLETED");
                        return some;
                    }
                }));
            }

            for (Future future: futuresList) {
                System.out.println(future.get());

            }

        }catch(Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }

        executorService.shutdown();
    }

    private static void testExecutorCompletionService(ThreadFactory threadFactory, final List<Long> randomMillis) {
        System.out.println("** EXECUTOR COMPLETION SERVICE **");

        ExecutorCompletionService<String> executorCompletionService = new ExecutorCompletionService(Executors.newFixedThreadPool(5,threadFactory));


        try {
            List<Future<String>> futuresList = new ArrayList<Future<String>>();

            for (int i = 1; i <= 10; i++) {
                final int a = i;
                futuresList.add(executorCompletionService.submit(new Callable<String>() {
                    public String call() throws Exception {
                        Thread.sleep(randomMillis.get(a-1));
                        String some = "-- "+a+" --"+Thread.currentThread().getName();
                        System.out.println("Executor Completion Service - "+a+" COMPLETED");
                        return some;
                    }
                }));
            }

//            for (Future future: futuresList) {
//                System.out.println(executorCompletionService.take().get());
//            }

            for (int i = 0; i < futuresList.size(); i++) {
                System.out.println(executorCompletionService.take().get());
            }

        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
    }

    private static List<Long> getRandomMilliseconds() {
        List<Long> randMillis = new ArrayList<Long>();

        Random random = new Random();
        for (int i = 0; i < 10; i++) {
            long longValue = random.nextInt(10) * 100;
            randMillis.add(longValue);
        }

        return randMillis;
    }

}